_______________________________________________________________

Print.cpp :
_______________________________________________________________

Print::Print(char source_name[], char date[])
{
    sets source file name, date to the input
    sets page number to 0.
}

Print::~Print()
{
    Print deconstructor;
}

void Print::printLine(char line[])
{
    set char save_ch = '\0';
    set char *save_chp = NULL;
    set static int line_count = MAX_LINES_PER_PAGE;
    
    if (++line_count > MAX_LINES_PER_PAGE)
    {
        printPageHeader();
        line_count = 1;
    }
    if (strlen(line) > MAX_PRINT_LINE_LENGTH)
    {
        save_chp = &line[MAX_PRINT_LINE_LENGTH];
    }
    if (save_chp)
    {
        save_ch = *save_chp;
        *save_chp = '\0';
    }
    printf("%s", line);
    if (save_chp)
    {
        *save_chp = save_ch;
    }
}

void Print::printPageHeader()
{
    Set char;
    print out the page header in page, file name, date format.
}

void Print::printToken(Token *token)
{
    set line;
    set symbol_String;
    
    switch (token->getCode())
    {
        if(token is a NUMBER):
            if (token is INTEGER_LIT)
            {
                sprintf(line,with the token int_literal);
            }
            else
            {
                sprintf(line,token with real literal);
            }
            break;
        if(token is a STRING):
            sprintf(line,token with string));
            break;
        else(default):
            sprintf(line,token with token string);
            break;
    }
    printLine;
}
_______________________________________________________________

BTree.cpp :
_______________________________________________________________

BTree::BTree()
{
    % BTree constructor
    Set root to NULL;
    Set num = 1;
}

BTree::~BTree()
{
    % Deconstructor
    Delete the tree recursively; (Call recursiveDeleteTree)
}

void recursiveDeleteTree(Token *root)
{
    if(left node isn't null)
    {
        call recursiveDeleteTree again with (node->left);
    }
    if(right node isn't null)
    {
        call recursiveDeleteTree again with (node->right);
    }
    delete;
}

void add_node(Token *new_token)
{
    if(root is null)
        root = next;
    else
    {
        Add a temp token pointing to root
        while(temp isn't null)
        {
            if(temp is alphabetically lesser than the node)
            {
                if(left node of temp is null)
                {
                    set new token to the left token of temp;
                    set temp to null to break while loop;
                    add line num to the new token;
                }
                else
                {
                    change temp to left of temp;
                }
            }
            else if(temp is alphabetically lesser than the node)
            {
                if(right node of temp is null)
                {
                    set new token to the tight token of temp;
                    set temp to null to break while loop;
                    add line num to the new token;
                }
                else
                {
                    change temp to right of temp;
                }
            }
            else if(the temp and new node are the same)
            {
                delete new_token;
                set the line num to new token;
            }
        }
    }
}

void add_line_num()
{
    Create linedlist
    add line num = &num;
    
}

_______________________________________________________________

Scanner.cpp :
_______________________________________________________________


typedef struct
{
    make struct for token;

}

(Add struct table)

Scanner::Scanner(FILE *source_file, char source_name[], char date[], Print printer) : print(printer)
{
    Scanner constructor:
    set all files to the input;
    use strcpy for name/date;
   
    
    for (loop using int i)
    {
        if/else statements:
        if i between 0 and 9 set as digit;
        else Letter/special character;
        
    }

}

Scanner::~Scanner()
{
    % Scanner deconstructor
}

bool Scanner::getSourceLine(char source_buffer[])
{
    boolean for if source line is past buffer;
}

Token* Scanner::getToken()
{
    set chars:
    ch = 0;
    token_string = max length array;
    token ptr = points to token_string;
    new token;

    Skip past all of the blanks
    
    if (check line ptr)
    skipBlanks(source_line);

    
    figure out which char it is: (LETTER, DIGIT, QUOTE, EOF, or special)

    {
        Call the appropriate function to deal with each case:
        if LETTER:
            getWord();
        if DIGIT:
            getNumber();
        if QUOTE:
            getString();
        if EOF_CODE:
            new_token->setCode(EOF)
        else default:
            getSpecial();
            break;
    }
    
    return new_token;
}

char Scanner::getChar(char source_buffer[])
{
    
    char ch;
    
    if (*line_ptr == '\0')
    {
        if (!getSourceLine(source_buffer))
        {
            ch = EOF_CHAR;
            return ch;
        }
        line_ptr = source_buffer;
    }
    
    set ch_next to next char in source buffer;
    
    ch = *line_ptr;
    if ((ch == '\n') || (ch == '\t') || (ch == '\r'))
    {
        ch = ' ';
    }
    if (ch == '{')
    {
        skipComment(source_buffer);
    }
    return ch;
}

void Scanner::skipBlanks(char source_buffer[])
{
    code to skip blanks;
    while (getChar(source_buffer) == ' ' && (*line_ptr != EOF_CHAR))
    {
        line_ptr++;
    }
}

void Scanner::skipComment(char source_buffer[])
{
    code to skip comment;
    char ch;
    
    do
    {
        ch = *line_ptr++;
    }
    while ((ch != '}') && (ch != EOF_CHAR));
}

void Scanner::getWord(char *str, char *token_ptr, Token *tok)
{
    code to extract word;
    
    char ch = *line_ptr;
    while ((char_table[ch] == LETTER) || (char_table[ch] == DIGIT))
    {
        *token_ptr++ = *line_ptr++;
        ch = *line_ptr;
    }
    *token_ptr = '\0';
    
    % make lower case
    downshiftWord(str);
    
    %check if it's a reserved word or not
    if (!isReservedWord(str, tok))
    {
        //set token to identifier
        tok->setCode(IDENTIFIER);
    }
    tok->setTokenString(string(str));
}

void Scanner::getNumber(char *str, char *token_ptr, Token *tok)
{
    /*
     Write some code to Extract the number and convert it to a literal number.
     */
     
    % Extract  number and turn into literal number;
    
    char ch = *line_ptr;
    bool int_type = true;
    
    %do-while incrementing line ptr;
    do
    {
        *(token_ptr++) = ch;
        ch = *(++line_ptr);
    }
    while (char_table[ch] == DIGIT);
    
    
    many if statements for different types of characters: Ex. '.', 'e', etc.
    if (ch == '.')
    if (ch == 'e' || ch == 'E')
    if (int_type)
    {
        tok->setType(INTEGER_LIT);
        tok->setLiteral((int)atoi(str));
    }
    else
    {
        tok->setType(REAL_LIT);
        tok->setLiteral((float)atof(str));
    }
}

void Scanner::getString(char *str, char *token_ptr, Token *tok)
{
    Extract string;
    
    use pointer to get to string, take it;
}

void Scanner::getSpecial(char *str, char *token_ptr, Token *tok)
{
    check for either single or double character special characters;
    
    char ch = *line_ptr;
    *token_ptr = ch;
    
    % Approx 5 billion cases for all different types of special chars: ^,*,(,),[,<,>, etc.
    switch (ch) 
    {
        case '^':
            tok->setCode(UPARROW);
            token_ptr++;
            line_ptr++;
            break;
        case '*':
            tok->setCode(STAR);
            token_ptr++;
            line_ptr++;
            break;
        ...

        case '+':
            tok->setCode(PLUS);
            token_ptr++;
            line_ptr++;
            break;
        ...
        
        default:
            tok->setCode(ERROR);
            token_ptr++;
            line_ptr++;
            break;
    }
    *token_ptr = '\0';
    tok->setTokenString(string(str));
}

void Scanner::downshiftWord(char word[])
{
    %downshift all the characters in a word
    
    int index;
    
    for (index < string length; index++)
    {
        if (word[index] >= 65 && )
        {
            word[index] = word[index] + 32;
        }
    }
}

bool Scanner::isReservedWord(char *str, Token *tok)
{
    % Check for reserved words;
    
    size_t str_len = strlen(str);
    
    if (str_len between 2 and 9)
    {
        appropriate cases for each type of word;
    }
    else
        return false;
}

_______________________________________________________________

Token.cpp :
_______________________________________________________________


Token::Token()
{
    initialize all parts of token to NULL;

}

Token::~Token()
{
    Token deconstructor to free up memory;
}


% Bunch of setter/getter functions for all parts of token.

void Token::setCode(TokenCode newCode)
{
    this->code = newCode;
}

TokenCode Token::getCode()
{
    return this->code;
}

void Token::setType(LiteralType newType)
{
    this->type = newType;
}

LiteralType Token::getType()
{
    return this->type;
}

void Token::setLiteral(int newInteger)
{
    this->literal.integer = newInteger;
}

int Token::getIntLiteral()
{
    return this->literal.integer;
}

void Token::setLiteral(float newReal)
{
    this->literal.real = newReal;
}

float Token::getRealLiteral()
{
    return this->literal.real;
}

void Token::setLiteral(string newString)
{
    this->literal.stringLiteral = (char*)malloc(sizeof(char) * newString.length() + 1);
    strcpy(this->literal.stringLiteral, newString.c_str());
}
string Token::getStringLiteral()
{
    return string(this->literal.stringLiteral);
}
void Token::setTokenString(string s)
{
    this->tokenString = s;
}
string Token::getTokenString()
{
    return this->tokenString;
}

%Implement binary tree

void add_node(LineList *item){
    LineList * temp = item;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = item;
    
}

_______________________________________________________________

Main.cpp :
_______________________________________________________________



FILE *init_lister(const char *name, char source_file_name[], char dte[])
{
    time_t timer;
    FILE *file;
    
    strcpy(file name);
    set timer;
    return the file;
}


_________

   END
_________













